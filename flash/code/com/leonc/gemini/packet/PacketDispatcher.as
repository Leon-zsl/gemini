package com.leonc.gemini.packet{		import flash.external.*;	//import flash.utils.Dictionary;	import flash.display.Stage;	import flash.events.Event;		import com.scaleform.std.packet.*;	public class PacketDispatcher	{		//var _dict:Dictionary = new Dictionary();		var _stage:Stage = null;		public function init(owner:Stage):void		{			_stage = owner;		}		public function connectServer(name:String, ip:String, port:int)		{			ExternalInterface.call("_ConnectServer", name, ip, port);		}				public function disconnectServer(name:String):void		{			ExternalInterface.call("_DisconnectServer", name);		}		public function sendPacket(name:String, pck:Packet):void		{			ExternalInterface.call("_TransferMsgFromSF", name, pck.opcode, pck.data);		}				public function registerHandler(msg:String, func:Function):void		{			if(_stage == null) return;			_stage.addEventListener(msg, func);		}		public function registerHandlerByOpcode(op:int, func:Function):void		{			if(_stage == null) return;			_stage.addEventListener("" + op, func);		}		//used by cpp code		public function _recvPacket(name:String, op:int, data:String):void		{			var pck:Packet = new Packet();			pck.opcode = op;			pck.data = data;			handlePacket(name, pck);		}		//used by cpp code		public function _connError(name:String, err:int):void		{			handleError(name, err);		}				private function handlePacket(name:String, pck:Packet):void		{			if(_stage == null) return;			var e:PacketEvent = new PacketEvent("" + pck.opcode);			e.name = name;			e.packet = pck;			_stage.dispatchEvent(e);		}		private function handleError(name:String, err:int):void		{			if(_stage == null) return;			var e:PacketEvent = new PacketEvent(PacketEvent.CONN_ERROR);			e.name = name;			e.error = err;			_stage.dispatchEvent(e);		}	}}