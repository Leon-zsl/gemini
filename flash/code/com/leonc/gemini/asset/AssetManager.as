package com.leonc.gemini.asset{    import flash.events.Event;    import flash.display.Stage;    import flash.display.Loader;    import flash.net.URLRequest;    import flash.external.*;    import flash.utils.*;    import com.leonc.gemini.log.Log;    public class AssetManager    {        //used for swf and gfx        public const AF_USE_LOCAL:int = 0        public const AF_USE_REMOTE:int = 1        public const AF_UNKNOWNASSET:int = -1        public const AF_DOWNLOADFAILED:int = -2        //used for bin data        public const ASSET_OK:int = 0        public const ASSET_ERR_UNKNOWNASSET:int = -1        public const ASSET_ERR_LOADFAILED:int = -2        public const ASSET_ERR_DOWNLOADFAILED:int = -3        private var swf_map:Dictionary = new Dictionary();        private var gfx_map:Dictionary = new Dictionary();        private var bin_map:Dictionary = new Dictionary();        public function LoadSwf(name:String, func:Function):void        {            if(swf_map[name] === null || swf_map[name] === undefined) {                var arr:Array = new Array();                arr.push(func);                swf_map[name] = arr;                ExternalInterface.call("_GetAssetFile", name);            } else {                swf_map[name].push(func);            }        }        public function LoadGfx(name:String, func:Function):void        {            if(gfx_map[name] === null || gfx_map[name] === undefined) {                var arr:Array = new Array();                arr.push(func);                gfx_map[name] = arr;                ExternalInterface.call("_GetAssetFile", name);            } else {                gfx_map[name].push(func);            }        }        public function LoadBinData(name:String, func:Function):void        {            if(bin_map[name] === null || bin_map[name] === undefined) {                var arr:Array = new Array();                arr.push(func);                bin_map[name] = arr;                ExternalInterface.call("_LoadAsset", name);            } else {                bin_map[name].push(func);            }        }        public function _onGetAssetFile(name:String, status:int, internalError:int, path:String):void        {			trace("on get asset file");			Log.Info("get asset file:" + name);			            var arr:Array = swf_map[name];            if(swf_map[name] !== null && swf_map[name] !== undefined && swf_map[name].length > 0) {                if(status == AF_UNKNOWNASSET || status == AF_DOWNLOADFAILED) {                    for each(var f0:Function in arr) {                        f0(name, status, null);                    }                } else {                    var request:URLRequest = new URLRequest(path);                     var l0:Loader = new Loader();                    l0.load(request);                     for each(var f1:Function in arr) {                        f1(name, status, l0);                    }                }                delete swf_map[name];            }            Log.Info("get asset file 0000:" + name);            arr = gfx_map[name];            if(swf_map[name] !== null && swf_map[name] !== undefined && swf_map[name].length > 0) {                if(status == AF_UNKNOWNASSET || status == AF_DOWNLOADFAILED) {                    for each(var f2:Function in arr) {                        f2(name, status, null);                    }                } else {                    var req:URLRequest = new URLRequest(path);                     var l1:Loader = new Loader();                    l1.load(req);                    for each(var f3:Function in arr) {                        f3(name, status, l1);                    }                }                delete gfx_map[name];            }            Log.Info("get asset file 1111:" + name);        }        public function _onLoadAsset(name:String, status:int, internalError:int, buffer:ByteArray):void        {			trace("on load asset");			Log.Info("load asset:" + name);			            var arr:Array = bin_map[name];            if(bin_map[name] === null || bin_map[name] === undefined || bin_map[name].length <= 0)                return;                        for each(var func:Function in arr) {                func(name, status, buffer);            }            delete bin_map[name];        }    }}